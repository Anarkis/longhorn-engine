// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	controller.proto

It has these top-level messages:
	Volume
	ReplicaAddress
	ControllerReplica
	VolumeStartRequest
	VolumeSnapshotRequest
	VolumeSnapshotReply
	VolumeRevertRequest
	VolumeFrontendStartRequest
	VolumePrepareRestoreRequest
	VolumeFinishRestoreRequest
	ReplicaListReply
	ReplicaPrepareRebuildReply
	JournalListRequest
	PortUpdateRequest
	VersionOutput
	VersionDetailGetReply
	Metric
	MetricGetReply
	BackupReplicaMapping
	BackupReplicaMap
	BackupReplicaMappingDeleteRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReplicaMode int32

const (
	ReplicaMode_WO  ReplicaMode = 0
	ReplicaMode_RW  ReplicaMode = 1
	ReplicaMode_ERR ReplicaMode = 2
)

var ReplicaMode_name = map[int32]string{
	0: "WO",
	1: "RW",
	2: "ERR",
}
var ReplicaMode_value = map[string]int32{
	"WO":  0,
	"RW":  1,
	"ERR": 2,
}

func (x ReplicaMode) String() string {
	return proto.EnumName(ReplicaMode_name, int32(x))
}
func (ReplicaMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Volume struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReplicaCount  int32  `protobuf:"varint,2,opt,name=replicaCount" json:"replicaCount,omitempty"`
	Endpoint      string `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
	Frontend      string `protobuf:"bytes,4,opt,name=frontend" json:"frontend,omitempty"`
	FrontendState string `protobuf:"bytes,5,opt,name=frontendState" json:"frontendState,omitempty"`
	IsRestoring   bool   `protobuf:"varint,6,opt,name=isRestoring" json:"isRestoring,omitempty"`
	LastRestored  string `protobuf:"bytes,7,opt,name=lastRestored" json:"lastRestored,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *Volume) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Volume) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *Volume) GetFrontendState() string {
	if m != nil {
		return m.FrontendState
	}
	return ""
}

func (m *Volume) GetIsRestoring() bool {
	if m != nil {
		return m.IsRestoring
	}
	return false
}

func (m *Volume) GetLastRestored() string {
	if m != nil {
		return m.LastRestored
	}
	return ""
}

type ReplicaAddress struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ReplicaAddress) Reset()                    { *m = ReplicaAddress{} }
func (m *ReplicaAddress) String() string            { return proto.CompactTextString(m) }
func (*ReplicaAddress) ProtoMessage()               {}
func (*ReplicaAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReplicaAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ControllerReplica struct {
	Address *ReplicaAddress `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Mode    ReplicaMode     `protobuf:"varint,2,opt,name=mode,enum=pb.ReplicaMode" json:"mode,omitempty"`
}

func (m *ControllerReplica) Reset()                    { *m = ControllerReplica{} }
func (m *ControllerReplica) String() string            { return proto.CompactTextString(m) }
func (*ControllerReplica) ProtoMessage()               {}
func (*ControllerReplica) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ControllerReplica) GetAddress() *ReplicaAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ControllerReplica) GetMode() ReplicaMode {
	if m != nil {
		return m.Mode
	}
	return ReplicaMode_WO
}

type VolumeStartRequest struct {
	ReplicaAddresses []string `protobuf:"bytes,1,rep,name=replicaAddresses" json:"replicaAddresses,omitempty"`
}

func (m *VolumeStartRequest) Reset()                    { *m = VolumeStartRequest{} }
func (m *VolumeStartRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeStartRequest) ProtoMessage()               {}
func (*VolumeStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VolumeStartRequest) GetReplicaAddresses() []string {
	if m != nil {
		return m.ReplicaAddresses
	}
	return nil
}

type VolumeSnapshotRequest struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VolumeSnapshotRequest) Reset()                    { *m = VolumeSnapshotRequest{} }
func (m *VolumeSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeSnapshotRequest) ProtoMessage()               {}
func (*VolumeSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VolumeSnapshotRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeSnapshotRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type VolumeSnapshotReply struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *VolumeSnapshotReply) Reset()                    { *m = VolumeSnapshotReply{} }
func (m *VolumeSnapshotReply) String() string            { return proto.CompactTextString(m) }
func (*VolumeSnapshotReply) ProtoMessage()               {}
func (*VolumeSnapshotReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VolumeSnapshotReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VolumeRevertRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *VolumeRevertRequest) Reset()                    { *m = VolumeRevertRequest{} }
func (m *VolumeRevertRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeRevertRequest) ProtoMessage()               {}
func (*VolumeRevertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VolumeRevertRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VolumeFrontendStartRequest struct {
	Frontend string `protobuf:"bytes,1,opt,name=frontend" json:"frontend,omitempty"`
}

func (m *VolumeFrontendStartRequest) Reset()                    { *m = VolumeFrontendStartRequest{} }
func (m *VolumeFrontendStartRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeFrontendStartRequest) ProtoMessage()               {}
func (*VolumeFrontendStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VolumeFrontendStartRequest) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

type VolumePrepareRestoreRequest struct {
	LastRestored string `protobuf:"bytes,1,opt,name=lastRestored" json:"lastRestored,omitempty"`
}

func (m *VolumePrepareRestoreRequest) Reset()                    { *m = VolumePrepareRestoreRequest{} }
func (m *VolumePrepareRestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumePrepareRestoreRequest) ProtoMessage()               {}
func (*VolumePrepareRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VolumePrepareRestoreRequest) GetLastRestored() string {
	if m != nil {
		return m.LastRestored
	}
	return ""
}

type VolumeFinishRestoreRequest struct {
	CurrentRestored string `protobuf:"bytes,1,opt,name=currentRestored" json:"currentRestored,omitempty"`
}

func (m *VolumeFinishRestoreRequest) Reset()                    { *m = VolumeFinishRestoreRequest{} }
func (m *VolumeFinishRestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeFinishRestoreRequest) ProtoMessage()               {}
func (*VolumeFinishRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VolumeFinishRestoreRequest) GetCurrentRestored() string {
	if m != nil {
		return m.CurrentRestored
	}
	return ""
}

type ReplicaListReply struct {
	Replicas []*ControllerReplica `protobuf:"bytes,1,rep,name=replicas" json:"replicas,omitempty"`
}

func (m *ReplicaListReply) Reset()                    { *m = ReplicaListReply{} }
func (m *ReplicaListReply) String() string            { return proto.CompactTextString(m) }
func (*ReplicaListReply) ProtoMessage()               {}
func (*ReplicaListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReplicaListReply) GetReplicas() []*ControllerReplica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type ReplicaPrepareRebuildReply struct {
	Replica *ControllerReplica `protobuf:"bytes,1,opt,name=replica" json:"replica,omitempty"`
	Disks   []string           `protobuf:"bytes,2,rep,name=disks" json:"disks,omitempty"`
}

func (m *ReplicaPrepareRebuildReply) Reset()                    { *m = ReplicaPrepareRebuildReply{} }
func (m *ReplicaPrepareRebuildReply) String() string            { return proto.CompactTextString(m) }
func (*ReplicaPrepareRebuildReply) ProtoMessage()               {}
func (*ReplicaPrepareRebuildReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReplicaPrepareRebuildReply) GetReplica() *ControllerReplica {
	if m != nil {
		return m.Replica
	}
	return nil
}

func (m *ReplicaPrepareRebuildReply) GetDisks() []string {
	if m != nil {
		return m.Disks
	}
	return nil
}

type JournalListRequest struct {
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
}

func (m *JournalListRequest) Reset()                    { *m = JournalListRequest{} }
func (m *JournalListRequest) String() string            { return proto.CompactTextString(m) }
func (*JournalListRequest) ProtoMessage()               {}
func (*JournalListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *JournalListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PortUpdateRequest struct {
	Port int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
}

func (m *PortUpdateRequest) Reset()                    { *m = PortUpdateRequest{} }
func (m *PortUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*PortUpdateRequest) ProtoMessage()               {}
func (*PortUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PortUpdateRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type VersionOutput struct {
	Version                 string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	GitCommit               string `protobuf:"bytes,2,opt,name=gitCommit" json:"gitCommit,omitempty"`
	BuildDate               string `protobuf:"bytes,3,opt,name=buildDate" json:"buildDate,omitempty"`
	CliAPIVersion           int64  `protobuf:"varint,4,opt,name=cliAPIVersion" json:"cliAPIVersion,omitempty"`
	CliAPIMinVersion        int64  `protobuf:"varint,5,opt,name=cliAPIMinVersion" json:"cliAPIMinVersion,omitempty"`
	ControllerAPIVersion    int64  `protobuf:"varint,6,opt,name=controllerAPIVersion" json:"controllerAPIVersion,omitempty"`
	ControllerAPIMinVersion int64  `protobuf:"varint,7,opt,name=controllerAPIMinVersion" json:"controllerAPIMinVersion,omitempty"`
	DataFormatVersion       int64  `protobuf:"varint,8,opt,name=dataFormatVersion" json:"dataFormatVersion,omitempty"`
	DataFormatMinVersion    int64  `protobuf:"varint,9,opt,name=dataFormatMinVersion" json:"dataFormatMinVersion,omitempty"`
}

func (m *VersionOutput) Reset()                    { *m = VersionOutput{} }
func (m *VersionOutput) String() string            { return proto.CompactTextString(m) }
func (*VersionOutput) ProtoMessage()               {}
func (*VersionOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *VersionOutput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionOutput) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionOutput) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *VersionOutput) GetCliAPIVersion() int64 {
	if m != nil {
		return m.CliAPIVersion
	}
	return 0
}

func (m *VersionOutput) GetCliAPIMinVersion() int64 {
	if m != nil {
		return m.CliAPIMinVersion
	}
	return 0
}

func (m *VersionOutput) GetControllerAPIVersion() int64 {
	if m != nil {
		return m.ControllerAPIVersion
	}
	return 0
}

func (m *VersionOutput) GetControllerAPIMinVersion() int64 {
	if m != nil {
		return m.ControllerAPIMinVersion
	}
	return 0
}

func (m *VersionOutput) GetDataFormatVersion() int64 {
	if m != nil {
		return m.DataFormatVersion
	}
	return 0
}

func (m *VersionOutput) GetDataFormatMinVersion() int64 {
	if m != nil {
		return m.DataFormatMinVersion
	}
	return 0
}

type VersionDetailGetReply struct {
	Version *VersionOutput `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionDetailGetReply) Reset()                    { *m = VersionDetailGetReply{} }
func (m *VersionDetailGetReply) String() string            { return proto.CompactTextString(m) }
func (*VersionDetailGetReply) ProtoMessage()               {}
func (*VersionDetailGetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VersionDetailGetReply) GetVersion() *VersionOutput {
	if m != nil {
		return m.Version
	}
	return nil
}

type Metric struct {
	ReadBandwidth  uint64 `protobuf:"varint,1,opt,name=readBandwidth" json:"readBandwidth,omitempty"`
	WriteBandwidth uint64 `protobuf:"varint,2,opt,name=writeBandwidth" json:"writeBandwidth,omitempty"`
	ReadLatency    uint64 `protobuf:"varint,3,opt,name=readLatency" json:"readLatency,omitempty"`
	WriteLatency   uint64 `protobuf:"varint,4,opt,name=writeLatency" json:"writeLatency,omitempty"`
	IOPS           uint64 `protobuf:"varint,5,opt,name=iOPS" json:"iOPS,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Metric) GetReadBandwidth() uint64 {
	if m != nil {
		return m.ReadBandwidth
	}
	return 0
}

func (m *Metric) GetWriteBandwidth() uint64 {
	if m != nil {
		return m.WriteBandwidth
	}
	return 0
}

func (m *Metric) GetReadLatency() uint64 {
	if m != nil {
		return m.ReadLatency
	}
	return 0
}

func (m *Metric) GetWriteLatency() uint64 {
	if m != nil {
		return m.WriteLatency
	}
	return 0
}

func (m *Metric) GetIOPS() uint64 {
	if m != nil {
		return m.IOPS
	}
	return 0
}

type MetricGetReply struct {
	Metric *Metric `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
}

func (m *MetricGetReply) Reset()                    { *m = MetricGetReply{} }
func (m *MetricGetReply) String() string            { return proto.CompactTextString(m) }
func (*MetricGetReply) ProtoMessage()               {}
func (*MetricGetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MetricGetReply) GetMetric() *Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

type BackupReplicaMapping struct {
	Backup         string `protobuf:"bytes,1,opt,name=backup" json:"backup,omitempty"`
	ReplicaAddress string `protobuf:"bytes,2,opt,name=replicaAddress" json:"replicaAddress,omitempty"`
}

func (m *BackupReplicaMapping) Reset()                    { *m = BackupReplicaMapping{} }
func (m *BackupReplicaMapping) String() string            { return proto.CompactTextString(m) }
func (*BackupReplicaMapping) ProtoMessage()               {}
func (*BackupReplicaMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BackupReplicaMapping) GetBackup() string {
	if m != nil {
		return m.Backup
	}
	return ""
}

func (m *BackupReplicaMapping) GetReplicaAddress() string {
	if m != nil {
		return m.ReplicaAddress
	}
	return ""
}

type BackupReplicaMap struct {
	BackupReplicaMap map[string]string `protobuf:"bytes,1,rep,name=backupReplicaMap" json:"backupReplicaMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BackupReplicaMap) Reset()                    { *m = BackupReplicaMap{} }
func (m *BackupReplicaMap) String() string            { return proto.CompactTextString(m) }
func (*BackupReplicaMap) ProtoMessage()               {}
func (*BackupReplicaMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BackupReplicaMap) GetBackupReplicaMap() map[string]string {
	if m != nil {
		return m.BackupReplicaMap
	}
	return nil
}

type BackupReplicaMappingDeleteRequest struct {
	Backup string `protobuf:"bytes,1,opt,name=backup" json:"backup,omitempty"`
}

func (m *BackupReplicaMappingDeleteRequest) Reset()         { *m = BackupReplicaMappingDeleteRequest{} }
func (m *BackupReplicaMappingDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*BackupReplicaMappingDeleteRequest) ProtoMessage()    {}
func (*BackupReplicaMappingDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *BackupReplicaMappingDeleteRequest) GetBackup() string {
	if m != nil {
		return m.Backup
	}
	return ""
}

func init() {
	proto.RegisterType((*Volume)(nil), "pb.Volume")
	proto.RegisterType((*ReplicaAddress)(nil), "pb.ReplicaAddress")
	proto.RegisterType((*ControllerReplica)(nil), "pb.ControllerReplica")
	proto.RegisterType((*VolumeStartRequest)(nil), "pb.VolumeStartRequest")
	proto.RegisterType((*VolumeSnapshotRequest)(nil), "pb.VolumeSnapshotRequest")
	proto.RegisterType((*VolumeSnapshotReply)(nil), "pb.VolumeSnapshotReply")
	proto.RegisterType((*VolumeRevertRequest)(nil), "pb.VolumeRevertRequest")
	proto.RegisterType((*VolumeFrontendStartRequest)(nil), "pb.VolumeFrontendStartRequest")
	proto.RegisterType((*VolumePrepareRestoreRequest)(nil), "pb.VolumePrepareRestoreRequest")
	proto.RegisterType((*VolumeFinishRestoreRequest)(nil), "pb.VolumeFinishRestoreRequest")
	proto.RegisterType((*ReplicaListReply)(nil), "pb.ReplicaListReply")
	proto.RegisterType((*ReplicaPrepareRebuildReply)(nil), "pb.ReplicaPrepareRebuildReply")
	proto.RegisterType((*JournalListRequest)(nil), "pb.JournalListRequest")
	proto.RegisterType((*PortUpdateRequest)(nil), "pb.PortUpdateRequest")
	proto.RegisterType((*VersionOutput)(nil), "pb.VersionOutput")
	proto.RegisterType((*VersionDetailGetReply)(nil), "pb.VersionDetailGetReply")
	proto.RegisterType((*Metric)(nil), "pb.Metric")
	proto.RegisterType((*MetricGetReply)(nil), "pb.MetricGetReply")
	proto.RegisterType((*BackupReplicaMapping)(nil), "pb.BackupReplicaMapping")
	proto.RegisterType((*BackupReplicaMap)(nil), "pb.BackupReplicaMap")
	proto.RegisterType((*BackupReplicaMappingDeleteRequest)(nil), "pb.BackupReplicaMappingDeleteRequest")
	proto.RegisterEnum("pb.ReplicaMode", ReplicaMode_name, ReplicaMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ControllerService service

type ControllerServiceClient interface {
	VolumeGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Volume, error)
	VolumeStart(ctx context.Context, in *VolumeStartRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeShutdown(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Volume, error)
	VolumeSnapshot(ctx context.Context, in *VolumeSnapshotRequest, opts ...grpc.CallOption) (*VolumeSnapshotReply, error)
	VolumeRevert(ctx context.Context, in *VolumeRevertRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeFrontendStart(ctx context.Context, in *VolumeFrontendStartRequest, opts ...grpc.CallOption) (*Volume, error)
	VolumeFrontendShutdown(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Volume, error)
	ReplicaList(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ReplicaListReply, error)
	ReplicaGet(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error)
	ReplicaCreate(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error)
	ReplicaDelete(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ReplicaUpdate(ctx context.Context, in *ControllerReplica, opts ...grpc.CallOption) (*ControllerReplica, error)
	ReplicaPrepareRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ReplicaPrepareRebuildReply, error)
	ReplicaVerifyRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error)
	BackupReplicaMappingCreate(ctx context.Context, in *BackupReplicaMapping, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BackupReplicaMappingGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*BackupReplicaMap, error)
	BackupReplicaMappingDelete(ctx context.Context, in *BackupReplicaMappingDeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	JournalList(ctx context.Context, in *JournalListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	VersionDetailGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionDetailGetReply, error)
	MetricGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (ControllerService_MetricGetClient, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) VolumeGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeStart(ctx context.Context, in *VolumeStartRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeShutdown(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeShutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeSnapshot(ctx context.Context, in *VolumeSnapshotRequest, opts ...grpc.CallOption) (*VolumeSnapshotReply, error) {
	out := new(VolumeSnapshotReply)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeRevert(ctx context.Context, in *VolumeRevertRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeRevert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeFrontendStart(ctx context.Context, in *VolumeFrontendStartRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeFrontendStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VolumeFrontendShutdown(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VolumeFrontendShutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaList(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ReplicaListReply, error) {
	out := new(ReplicaListReply)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaGet(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaCreate(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaDelete(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaUpdate(ctx context.Context, in *ControllerReplica, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaPrepareRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ReplicaPrepareRebuildReply, error) {
	out := new(ReplicaPrepareRebuildReply)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaPrepareRebuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReplicaVerifyRebuild(ctx context.Context, in *ReplicaAddress, opts ...grpc.CallOption) (*ControllerReplica, error) {
	out := new(ControllerReplica)
	err := grpc.Invoke(ctx, "/pb.ControllerService/ReplicaVerifyRebuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) BackupReplicaMappingCreate(ctx context.Context, in *BackupReplicaMapping, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ControllerService/BackupReplicaMappingCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) BackupReplicaMappingGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*BackupReplicaMap, error) {
	out := new(BackupReplicaMap)
	err := grpc.Invoke(ctx, "/pb.ControllerService/BackupReplicaMappingGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) BackupReplicaMappingDelete(ctx context.Context, in *BackupReplicaMappingDeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ControllerService/BackupReplicaMappingDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) JournalList(ctx context.Context, in *JournalListRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ControllerService/JournalList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ControllerService/PortUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) VersionDetailGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionDetailGetReply, error) {
	out := new(VersionDetailGetReply)
	err := grpc.Invoke(ctx, "/pb.ControllerService/VersionDetailGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) MetricGet(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (ControllerService_MetricGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControllerService_serviceDesc.Streams[0], c.cc, "/pb.ControllerService/MetricGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceMetricGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_MetricGetClient interface {
	Recv() (*MetricGetReply, error)
	grpc.ClientStream
}

type controllerServiceMetricGetClient struct {
	grpc.ClientStream
}

func (x *controllerServiceMetricGetClient) Recv() (*MetricGetReply, error) {
	m := new(MetricGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ControllerService service

type ControllerServiceServer interface {
	VolumeGet(context.Context, *google_protobuf.Empty) (*Volume, error)
	VolumeStart(context.Context, *VolumeStartRequest) (*Volume, error)
	VolumeShutdown(context.Context, *google_protobuf.Empty) (*Volume, error)
	VolumeSnapshot(context.Context, *VolumeSnapshotRequest) (*VolumeSnapshotReply, error)
	VolumeRevert(context.Context, *VolumeRevertRequest) (*Volume, error)
	VolumeFrontendStart(context.Context, *VolumeFrontendStartRequest) (*Volume, error)
	VolumeFrontendShutdown(context.Context, *google_protobuf.Empty) (*Volume, error)
	ReplicaList(context.Context, *google_protobuf.Empty) (*ReplicaListReply, error)
	ReplicaGet(context.Context, *ReplicaAddress) (*ControllerReplica, error)
	ReplicaCreate(context.Context, *ReplicaAddress) (*ControllerReplica, error)
	ReplicaDelete(context.Context, *ReplicaAddress) (*google_protobuf.Empty, error)
	ReplicaUpdate(context.Context, *ControllerReplica) (*ControllerReplica, error)
	ReplicaPrepareRebuild(context.Context, *ReplicaAddress) (*ReplicaPrepareRebuildReply, error)
	ReplicaVerifyRebuild(context.Context, *ReplicaAddress) (*ControllerReplica, error)
	BackupReplicaMappingCreate(context.Context, *BackupReplicaMapping) (*google_protobuf.Empty, error)
	BackupReplicaMappingGet(context.Context, *google_protobuf.Empty) (*BackupReplicaMap, error)
	BackupReplicaMappingDelete(context.Context, *BackupReplicaMappingDeleteRequest) (*google_protobuf.Empty, error)
	JournalList(context.Context, *JournalListRequest) (*google_protobuf.Empty, error)
	PortUpdate(context.Context, *PortUpdateRequest) (*google_protobuf.Empty, error)
	VersionDetailGet(context.Context, *google_protobuf.Empty) (*VersionDetailGetReply, error)
	MetricGet(*google_protobuf.Empty, ControllerService_MetricGetServer) error
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_VolumeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeGet(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeStart(ctx, req.(*VolumeStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeShutdown(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeSnapshot(ctx, req.(*VolumeSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeRevert(ctx, req.(*VolumeRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeFrontendStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeFrontendStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeFrontendStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeFrontendStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeFrontendStart(ctx, req.(*VolumeFrontendStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VolumeFrontendShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VolumeFrontendShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VolumeFrontendShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VolumeFrontendShutdown(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaList(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaGet(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaCreate(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaDelete(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerReplica)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaUpdate(ctx, req.(*ControllerReplica))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaPrepareRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaPrepareRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaPrepareRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaPrepareRebuild(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReplicaVerifyRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ReplicaVerifyRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/ReplicaVerifyRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ReplicaVerifyRebuild(ctx, req.(*ReplicaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_BackupReplicaMappingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupReplicaMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).BackupReplicaMappingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/BackupReplicaMappingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).BackupReplicaMappingCreate(ctx, req.(*BackupReplicaMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_BackupReplicaMappingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).BackupReplicaMappingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/BackupReplicaMappingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).BackupReplicaMappingGet(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_BackupReplicaMappingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupReplicaMappingDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).BackupReplicaMappingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/BackupReplicaMappingDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).BackupReplicaMappingDelete(ctx, req.(*BackupReplicaMappingDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_JournalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).JournalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/JournalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).JournalList(ctx, req.(*JournalListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/PortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).PortUpdate(ctx, req.(*PortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_VersionDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).VersionDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerService/VersionDetailGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).VersionDetailGet(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_MetricGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).MetricGet(m, &controllerServiceMetricGetServer{stream})
}

type ControllerService_MetricGetServer interface {
	Send(*MetricGetReply) error
	grpc.ServerStream
}

type controllerServiceMetricGetServer struct {
	grpc.ServerStream
}

func (x *controllerServiceMetricGetServer) Send(m *MetricGetReply) error {
	return x.ServerStream.SendMsg(m)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeGet",
			Handler:    _ControllerService_VolumeGet_Handler,
		},
		{
			MethodName: "VolumeStart",
			Handler:    _ControllerService_VolumeStart_Handler,
		},
		{
			MethodName: "VolumeShutdown",
			Handler:    _ControllerService_VolumeShutdown_Handler,
		},
		{
			MethodName: "VolumeSnapshot",
			Handler:    _ControllerService_VolumeSnapshot_Handler,
		},
		{
			MethodName: "VolumeRevert",
			Handler:    _ControllerService_VolumeRevert_Handler,
		},
		{
			MethodName: "VolumeFrontendStart",
			Handler:    _ControllerService_VolumeFrontendStart_Handler,
		},
		{
			MethodName: "VolumeFrontendShutdown",
			Handler:    _ControllerService_VolumeFrontendShutdown_Handler,
		},
		{
			MethodName: "ReplicaList",
			Handler:    _ControllerService_ReplicaList_Handler,
		},
		{
			MethodName: "ReplicaGet",
			Handler:    _ControllerService_ReplicaGet_Handler,
		},
		{
			MethodName: "ReplicaCreate",
			Handler:    _ControllerService_ReplicaCreate_Handler,
		},
		{
			MethodName: "ReplicaDelete",
			Handler:    _ControllerService_ReplicaDelete_Handler,
		},
		{
			MethodName: "ReplicaUpdate",
			Handler:    _ControllerService_ReplicaUpdate_Handler,
		},
		{
			MethodName: "ReplicaPrepareRebuild",
			Handler:    _ControllerService_ReplicaPrepareRebuild_Handler,
		},
		{
			MethodName: "ReplicaVerifyRebuild",
			Handler:    _ControllerService_ReplicaVerifyRebuild_Handler,
		},
		{
			MethodName: "BackupReplicaMappingCreate",
			Handler:    _ControllerService_BackupReplicaMappingCreate_Handler,
		},
		{
			MethodName: "BackupReplicaMappingGet",
			Handler:    _ControllerService_BackupReplicaMappingGet_Handler,
		},
		{
			MethodName: "BackupReplicaMappingDelete",
			Handler:    _ControllerService_BackupReplicaMappingDelete_Handler,
		},
		{
			MethodName: "JournalList",
			Handler:    _ControllerService_JournalList_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _ControllerService_PortUpdate_Handler,
		},
		{
			MethodName: "VersionDetailGet",
			Handler:    _ControllerService_VersionDetailGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MetricGet",
			Handler:       _ControllerService_MetricGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x52, 0x1b, 0x37,
	0x14, 0xee, 0xfa, 0x0f, 0x7c, 0x9c, 0x10, 0xa3, 0x1a, 0xe2, 0x38, 0x9d, 0x0c, 0xdd, 0x36, 0xa9,
	0x4b, 0x33, 0xa6, 0x71, 0x32, 0xd3, 0x24, 0x34, 0x33, 0x25, 0x40, 0x98, 0xb6, 0x50, 0x18, 0x31,
	0x25, 0x17, 0xbd, 0x5a, 0x7b, 0x05, 0x68, 0x58, 0xef, 0x6e, 0xb5, 0x5a, 0x18, 0x3f, 0x41, 0x9f,
	0xa4, 0xd7, 0xed, 0xfb, 0xf4, 0xb6, 0x0f, 0xd2, 0xd1, 0xcf, 0xfe, 0x5a, 0xcb, 0x94, 0xab, 0x95,
	0x3e, 0x7d, 0xe7, 0xe8, 0x48, 0xe7, 0xec, 0xf9, 0x04, 0xdd, 0x69, 0xe0, 0x73, 0x16, 0x78, 0x1e,
	0x61, 0xa3, 0x90, 0x05, 0x3c, 0x40, 0xb5, 0x70, 0x32, 0x78, 0x7c, 0x11, 0x04, 0x17, 0x1e, 0xd9,
	0x92, 0xc8, 0x24, 0x3e, 0xdf, 0x22, 0xb3, 0x90, 0xcf, 0x15, 0xc1, 0xfe, 0xd7, 0x82, 0xd6, 0x59,
	0xe0, 0xc5, 0x33, 0x82, 0x10, 0x34, 0x7c, 0x67, 0x46, 0xfa, 0xd6, 0x86, 0x35, 0x6c, 0x63, 0x39,
	0x46, 0x36, 0xdc, 0x63, 0x24, 0xf4, 0xe8, 0xd4, 0xd9, 0x0d, 0x62, 0x9f, 0xf7, 0x6b, 0x1b, 0xd6,
	0xb0, 0x89, 0x0b, 0x18, 0x1a, 0xc0, 0x32, 0xf1, 0xdd, 0x30, 0xa0, 0x3e, 0xef, 0xd7, 0xa5, 0x6d,
	0x3a, 0x17, 0x6b, 0xe7, 0x2c, 0xf0, 0x39, 0xf1, 0xdd, 0x7e, 0x43, 0xad, 0x25, 0x73, 0xf4, 0x25,
	0xdc, 0x4f, 0xc6, 0xa7, 0xdc, 0xe1, 0xa4, 0xdf, 0x94, 0x84, 0x22, 0x88, 0x36, 0xa0, 0x43, 0x23,
	0x4c, 0x22, 0x1e, 0x30, 0xea, 0x5f, 0xf4, 0x5b, 0x1b, 0xd6, 0x70, 0x19, 0xe7, 0x21, 0x11, 0xa3,
	0xe7, 0x44, 0x5c, 0x01, 0xc4, 0xed, 0x2f, 0x49, 0x37, 0x05, 0xcc, 0xde, 0x84, 0x15, 0xac, 0x62,
	0xde, 0x71, 0x5d, 0x46, 0xa2, 0x08, 0xf5, 0x61, 0xc9, 0x51, 0x43, 0x7d, 0xe0, 0x64, 0x6a, 0x9f,
	0xc3, 0xea, 0x6e, 0x7a, 0x8f, 0xda, 0x0a, 0x3d, 0x2f, 0xd2, 0x3b, 0x63, 0x34, 0x0a, 0x27, 0xa3,
	0xa2, 0xcf, 0xd4, 0x05, 0xfa, 0x02, 0x1a, 0xb3, 0xc0, 0x25, 0xf2, 0xba, 0x56, 0xc6, 0x0f, 0x72,
	0xd4, 0xa3, 0xc0, 0x25, 0x58, 0x2e, 0xda, 0x3f, 0x00, 0x52, 0x37, 0x7f, 0xca, 0x1d, 0xc6, 0x31,
	0xf9, 0x3d, 0x26, 0x11, 0x47, 0x9b, 0xd0, 0x65, 0x05, 0xaf, 0x44, 0xec, 0x58, 0x1f, 0xb6, 0xf1,
	0x02, 0x6e, 0xff, 0x69, 0xc1, 0x9a, 0x76, 0xe1, 0x3b, 0x61, 0x74, 0x19, 0xa4, 0x5e, 0x4c, 0xb9,
	0x7c, 0x07, 0x2d, 0xcf, 0x99, 0x10, 0x2f, 0xea, 0xd7, 0x36, 0xea, 0xc3, 0xce, 0xf8, 0xa9, 0x08,
	0xcb, 0x68, 0x3e, 0x3a, 0x94, 0xbc, 0x7d, 0x9f, 0xb3, 0x39, 0xd6, 0x46, 0x83, 0x37, 0xd0, 0xc9,
	0xc1, 0xa8, 0x0b, 0xf5, 0x2b, 0x32, 0xd7, 0x1b, 0x88, 0x21, 0xea, 0x41, 0xf3, 0xda, 0xf1, 0x62,
	0x75, 0xea, 0x36, 0x56, 0x93, 0xb7, 0xb5, 0xd7, 0x96, 0xfd, 0x35, 0x7c, 0x5a, 0xde, 0x27, 0xf4,
	0xe6, 0xa6, 0x20, 0x33, 0x2a, 0x26, 0xd7, 0x84, 0xdd, 0x76, 0x1e, 0xfb, 0x35, 0x0c, 0x14, 0xf5,
	0x43, 0x56, 0x30, 0x99, 0x45, 0xbe, 0xf2, 0xac, 0x62, 0xe5, 0xd9, 0x3b, 0xf0, 0x58, 0x59, 0x9e,
	0x30, 0x12, 0x3a, 0x8c, 0xe8, 0x32, 0x49, 0x4c, 0xcb, 0x05, 0x65, 0x19, 0x0a, 0xea, 0x43, 0xba,
	0x39, 0xf5, 0x69, 0x74, 0x59, 0xf2, 0x30, 0x84, 0x07, 0xd3, 0x98, 0x31, 0xe2, 0x97, 0x9d, 0x94,
	0x61, 0x7b, 0x1f, 0xba, 0xba, 0x32, 0x0e, 0x69, 0xa4, 0xef, 0xe5, 0x05, 0x2c, 0xeb, 0x54, 0xab,
	0xd4, 0x77, 0xc6, 0x6b, 0x22, 0x55, 0x0b, 0x45, 0x89, 0x53, 0x9a, 0x3d, 0x85, 0x81, 0x06, 0xd3,
	0x23, 0x4d, 0x62, 0xea, 0xb9, 0xca, 0xe1, 0x16, 0x2c, 0x69, 0xa6, 0x2e, 0xde, 0x0a, 0x7f, 0x09,
	0x4b, 0xa4, 0xd2, 0xa5, 0xd1, 0x95, 0xaa, 0x94, 0x36, 0x56, 0x13, 0x7b, 0x13, 0xd0, 0x4f, 0x41,
	0xcc, 0x7c, 0xc7, 0x53, 0xb1, 0xaa, 0xb3, 0xf6, 0xa0, 0xe9, 0xd1, 0x19, 0xe5, 0xd2, 0x75, 0x1d,
	0xab, 0x89, 0xfd, 0x15, 0xac, 0x9e, 0x04, 0x8c, 0xff, 0x1a, 0xba, 0x0e, 0x27, 0xb9, 0x2c, 0x86,
	0x01, 0x53, 0xcc, 0x26, 0x96, 0x63, 0xfb, 0x8f, 0x3a, 0xdc, 0x3f, 0x23, 0x2c, 0xa2, 0x81, 0x7f,
	0x1c, 0xf3, 0x30, 0xe6, 0xe2, 0xcf, 0xbc, 0x56, 0x40, 0xf2, 0x67, 0xea, 0x29, 0xfa, 0x0c, 0xda,
	0x17, 0x94, 0xef, 0x06, 0x33, 0xb1, 0x9d, 0xaa, 0xb2, 0x0c, 0x10, 0xab, 0xf2, 0xcc, 0x7b, 0xa2,
	0x97, 0xa8, 0x46, 0x94, 0x01, 0xa2, 0xdb, 0x4c, 0x3d, 0xba, 0x73, 0xf2, 0xa3, 0xde, 0x4c, 0xb6,
	0xa3, 0x3a, 0x2e, 0x82, 0xe2, 0xef, 0x53, 0xc0, 0x11, 0xf5, 0x13, 0x62, 0x53, 0x12, 0x17, 0x70,
	0x34, 0x86, 0x5e, 0xd6, 0x6f, 0x73, 0x8e, 0x5b, 0x92, 0x6f, 0x5c, 0x43, 0xaf, 0xe1, 0x61, 0x01,
	0xcf, 0x6d, 0xb3, 0x24, 0xcd, 0xaa, 0x96, 0xd1, 0x73, 0x58, 0x75, 0x1d, 0xee, 0x7c, 0x08, 0xd8,
	0xcc, 0xe1, 0x89, 0xcd, 0xb2, 0xb4, 0x59, 0x5c, 0x10, 0xb1, 0x65, 0x60, 0x6e, 0x93, 0xb6, 0x8a,
	0xcd, 0xb4, 0x66, 0xef, 0xc1, 0x9a, 0x1e, 0xee, 0x11, 0xee, 0x50, 0xef, 0x80, 0xe8, 0x7a, 0xfc,
	0xa6, 0x98, 0x90, 0xce, 0x78, 0x55, 0x76, 0x8e, 0x7c, 0xd2, 0xd2, 0x1c, 0xd9, 0x7f, 0x5b, 0xd0,
	0x3a, 0x22, 0x9c, 0xd1, 0xa9, 0xb8, 0x72, 0x46, 0x1c, 0xf7, 0xbd, 0xe3, 0xbb, 0x37, 0xd4, 0xe5,
	0x97, 0xd2, 0xba, 0x81, 0x8b, 0x20, 0x7a, 0x06, 0x2b, 0x37, 0x8c, 0x72, 0x92, 0xd1, 0x6a, 0x92,
	0x56, 0x42, 0x85, 0x10, 0x08, 0xc3, 0x43, 0x87, 0x13, 0x7f, 0x3a, 0x97, 0x09, 0x6e, 0xe0, 0x3c,
	0x24, 0xfe, 0x5b, 0x69, 0x93, 0x50, 0x1a, 0x92, 0x52, 0xc0, 0x44, 0x09, 0xd2, 0xe3, 0x93, 0x53,
	0x99, 0xd4, 0x06, 0x96, 0x63, 0xfb, 0x15, 0xac, 0xa8, 0x88, 0xd3, 0x13, 0xdb, 0xd0, 0x9a, 0x49,
	0x44, 0x1f, 0x18, 0xc4, 0x81, 0x15, 0x07, 0xeb, 0x15, 0xfb, 0x0c, 0x7a, 0xef, 0x9d, 0xe9, 0x55,
	0x1c, 0x26, 0x9d, 0xdd, 0x09, 0x43, 0x21, 0x47, 0xeb, 0xd0, 0x9a, 0x48, 0x5c, 0x57, 0xaf, 0x9e,
	0x89, 0x73, 0x16, 0x1b, 0xb8, 0xae, 0xe0, 0x12, 0x6a, 0xff, 0x65, 0x41, 0xb7, 0xec, 0x18, 0x9d,
	0x41, 0x77, 0x52, 0xc2, 0x74, 0x6b, 0xd8, 0x14, 0xa1, 0x95, 0xf9, 0x0b, 0x80, 0x6a, 0xe5, 0x0b,
	0x3e, 0x06, 0xbb, 0xb0, 0x66, 0xa4, 0xde, 0xa9, 0xbd, 0x6f, 0xc3, 0xe7, 0xa6, 0x9b, 0xd8, 0x23,
	0x1e, 0xc9, 0xfe, 0xfd, 0x8a, 0x6b, 0xd9, 0x7c, 0x06, 0x9d, 0x9c, 0x34, 0xa2, 0x16, 0xd4, 0x3e,
	0x1e, 0x77, 0x3f, 0x11, 0x5f, 0xfc, 0xb1, 0x6b, 0xa1, 0x25, 0xa8, 0xef, 0x63, 0xdc, 0xad, 0x8d,
	0xff, 0x81, 0xbc, 0x2c, 0x9f, 0x12, 0x76, 0x4d, 0xa7, 0x04, 0x6d, 0x41, 0x5b, 0xb5, 0xe1, 0x03,
	0xc2, 0xd1, 0xfa, 0x48, 0xbd, 0x74, 0x46, 0xc9, 0x4b, 0x67, 0xb4, 0x2f, 0x5e, 0x3a, 0x03, 0xc8,
	0x84, 0x0e, 0xbd, 0x80, 0x4e, 0x4e, 0x74, 0xd1, 0x7a, 0x4e, 0x03, 0x73, 0xea, 0x51, 0x30, 0x79,
	0x05, 0x2b, 0x9a, 0x71, 0x19, 0x73, 0x37, 0xb8, 0xf1, 0xff, 0xd7, 0x46, 0x7b, 0xa9, 0x95, 0xd6,
	0x3c, 0xf4, 0xa8, 0x52, 0x6f, 0x07, 0x0f, 0x4d, 0x4b, 0xa2, 0x10, 0x5f, 0xc2, 0xbd, 0xbc, 0x1c,
	0xa2, 0x1c, 0xb1, 0x20, 0x90, 0x85, 0xad, 0x77, 0x12, 0x0d, 0x2d, 0x08, 0x23, 0x7a, 0x92, 0x51,
	0x4c, 0x8a, 0x59, 0x70, 0xf1, 0x3d, 0xac, 0x97, 0x98, 0x77, 0x39, 0xfb, 0x76, 0x9a, 0x53, 0x21,
	0x14, 0x95, 0x26, 0xbd, 0xdc, 0xbb, 0x28, 0x53, 0xbf, 0xef, 0x00, 0x34, 0x26, 0x72, 0x6a, 0x78,
	0x66, 0x0d, 0xcc, 0xea, 0x85, 0xde, 0xc2, 0x7d, 0x3d, 0xdc, 0x65, 0x44, 0xb4, 0xfc, 0x3b, 0xd8,
	0x6e, 0xa7, 0xb6, 0xaa, 0x6a, 0x8d, 0xb6, 0x15, 0xe7, 0x40, 0xef, 0x52, 0x63, 0x25, 0x77, 0xc8,
	0xbc, 0x49, 0xd5, 0xde, 0x3f, 0xc3, 0x9a, 0x51, 0xbb, 0x8d, 0x31, 0x3c, 0xc9, 0x61, 0x26, 0xa9,
	0xdf, 0x81, 0x9e, 0x5e, 0x3d, 0x23, 0x8c, 0x9e, 0xcf, 0x6f, 0xf3, 0x55, 0x11, 0xcf, 0x2f, 0x30,
	0x30, 0xfd, 0xce, 0xfa, 0x52, 0xfb, 0xa6, 0x7e, 0x23, 0xd6, 0x2b, 0xaf, 0xe7, 0x00, 0x1e, 0x9a,
	0xf8, 0xb7, 0xfd, 0xb1, 0x3d, 0xd3, 0x26, 0xe8, 0x37, 0x73, 0x60, 0x3a, 0x63, 0x4f, 0xab, 0x02,
	0x2b, 0xf4, 0xa1, 0x5b, 0x92, 0xd8, 0xc9, 0x3d, 0x6e, 0x54, 0x63, 0x58, 0x7c, 0xed, 0x54, 0x9a,
	0x6f, 0x03, 0x64, 0xef, 0x1d, 0x55, 0x00, 0x0b, 0xef, 0x9f, 0x4a, 0xe3, 0x7d, 0xe8, 0x96, 0x95,
	0xb7, 0xf2, 0x6a, 0x1e, 0xe5, 0xb4, 0xb7, 0xa4, 0xd3, 0x6f, 0xa0, 0x9d, 0xea, 0x58, 0xa5, 0x3d,
	0xca, 0xa4, 0x2c, 0x31, 0xfc, 0xd6, 0x9a, 0xb4, 0x24, 0xeb, 0xe5, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x2f, 0xc8, 0x09, 0x76, 0x42, 0x0e, 0x00, 0x00,
}
